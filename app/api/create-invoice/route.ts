import TelegramBot from "node-telegram-bot-api";
import { NextRequest, NextResponse } from "next/server";
import { token } from "@/types/Constants";

interface CreateInvoiceRequest {
    queryId?: string;
    userId: string;
    
    products?: any[];
    totalPrice?: number;

    subscription_period?: number;
    amount?: number;
    isSubscription?: boolean;
}

interface InvoiceData {
    title: string;
    description: string;
    payload: string;
    provider_token: string;
    currency: string;
    prices: Array<{
        label: string;
        amount: number;
    }>;
    start_parameter: string;
    recurring?: boolean;
    subscription_period?: number;
}

export async function POST(request: NextRequest) {
    try {
        const requestData: CreateInvoiceRequest = await request.json();
        const { products, totalPrice, queryId, userId, subscription_period, amount, isSubscription } = requestData;

        if (!token) {
            throw new Error('—Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }

        const bot = new TelegramBot(token, { polling: false });

        bot.on('message', async (msg) => {
            const chatId = msg.chat.id;
            
            if (msg.successful_payment) {
                try {
                    const payload = msg.successful_payment.invoice_payload;
                    const isSubscriptionPayment = payload.startsWith('subscription_');

                    if (isSubscriptionPayment) {
                        await bot.sendMessage(chatId, 
                            `–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n` +
                            `–ó–∞–∫–∞–∑: ${payload}\n` +
                            `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${msg.successful_payment.total_amount} ‚≠ê\n` +
                            `–ü–µ—Ä–∏–æ–¥: 30 –¥–Ω–µ–π\n` +
                            `ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${msg.successful_payment.telegram_payment_charge_id}\n\n` 
                        );
                    } else {
                        await bot.sendMessage(chatId, 
                            `–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n` +
                            `–ó–∞–∫–∞–∑: ${payload}\n` +
                            `–°—É–º–º–∞: ${msg.successful_payment.total_amount} ‚≠ê\n` +
                            `ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${msg.successful_payment.telegram_payment_charge_id}\n\n`
                        );
                    }
                } catch (e: any) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞:', e);
                    await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
                }
            }
        });

        let invoiceData: InvoiceData;
        let orderId: string;

        if (isSubscription) {
            if (!amount) {
                return NextResponse.json(
                    { error: '–î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å amount' }, 
                    { status: 400 }
                );
            }

            orderId = `subscription_${Date.now()}_${userId}`;
            
            invoiceData = {
                title: '–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞',
                description: '–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —Å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏',
                payload: orderId,
                provider_token: '', 
                recurring: true,
                currency: 'XTR', 
                prices: [{
                    label: '–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞',
                    amount: amount
                }],
                start_parameter: 'start_parameter',
                subscription_period: 2592000 
            };
        } else {
            if (!products || !totalPrice) {
                return NextResponse.json(
                    { error: '–î–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è products –∏ totalPrice' }, 
                    { status: 400 }
                );
            }

            orderId = `order_${Date.now()}_${userId}`;
            
            invoiceData = {
                title: 'üõí –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤',
                description: `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`,
                payload: orderId,
                provider_token: '',
                currency: 'XTR',
                prices: [{
                    label: '–ò—Ç–æ–≥–æ',
                    amount: totalPrice
                }],
                start_parameter: 'start_parameter'
            };
        }

        const response = await fetch(`https://api.telegram.org/bot${token}/createInvoiceLink`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(invoiceData)
        });

        const data = await response.json();
        
        if (!data.ok) {
            console.error('–û—à–∏–±–∫–∞ Telegram API:', data);
            console.error('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', invoiceData);
            
            let errorMessage = data.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
            
            if (data.error_code === 400) {
                if (data.description?.includes('CURRENCY_NOT_SUPPORTED')) {
                    errorMessage = '–í–∞–ª—é—Ç–∞ XTR (Telegram Stars) –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ';
                } else if (data.description?.includes('AMOUNT_TOO_HIGH')) {
                    errorMessage = '–°—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é';
                } else if (data.description?.includes('SUBSCRIPTION_PERIOD_INVALID')) {
                    errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ 30 –¥–Ω–µ–π (2592000 —Å–µ–∫—É–Ω–¥)';
                } else if (data.description?.includes('RECURRING_NOT_SUPPORTED')) {
                    errorMessage = '–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏';
                }
            }
            
            return NextResponse.json(
                { 
                    error: isSubscription ? '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏' : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞', 
                    details: errorMessage 
                }, 
                { status: data.error_code || 500 }
            );
        }

        const responseData: any = {
            invoice_link: data.result,
            order_id: orderId,
            type: isSubscription ? 'subscription' : 'purchase'
        };

        if (isSubscription) {
            responseData.amount = amount;
            responseData.period_seconds = subscription_period || 2592000;
            responseData.period_days = Math.floor((subscription_period || 2592000) / 86400);
        } else {
            responseData.total_price = totalPrice;
            responseData.products_count = products?.length || 0;
        }

        return NextResponse.json(responseData);

    } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        return NextResponse.json(
            { error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message }, 
            { status: 500 }
        );
    }
}
